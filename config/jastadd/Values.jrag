aspect Values{


    syn lazy Include DebuggerConfig.getInclude(){
        for(Block block : getBlockList()){
            if(block.isInclude())
                return (Include)block;
        }
        return null;
    }

    syn lazy Global DebuggerConfig.getGlobal(){
        for(Block block : getBlockList()){
            if(block.isGlobal())
                return (Global)block;
        }
        return null;
    }

    syn boolean Block.isInclude() = false;
    syn boolean Block.isGlobal() = false;
    eq Include.isInclude() = true;
    eq Global.isGlobal() = true;

    syn BinExprList NodeConfig.getBinExprList(String name) { return hasConfigList() ? getConfigList().getBinExprList(name) : null;}
    syn BindingList NodeConfig.getBindingList(String name) { return hasConfigList() ? getConfigList().getBindingList(name) : null;}
    syn IdDeclList NodeConfig.getIdDeclList(String name)  { return hasConfigList() ? getConfigList().getIdDeclList(name) : null;}

    syn BinExprList Global.getBinExprList(String name){ return hasConfigList() ? getConfigList().getBinExprList(name) : null;}
    syn BindingList Global.getBindingList(String name){ return hasConfigList() ? getConfigList().getBindingList(name) : null;}
    syn IdDeclList Global.getIdDeclList(String name){ return hasConfigList() ? getConfigList().getIdDeclList(name) : null;}

    syn BinExprList ConfigList.getBinExprList(String name){
        for(Config config : getConfigList()){
            if(config.isConfigBlock(name) && config.getConfigBlock().isBinExprList())
                return (BinExprList) config.getConfigBlock();
        }
        return null;
    }

    syn BindingList ConfigList.getBindingList(String name){
        for(Config config : getConfigList()){
            if(config.isConfigBlock(name) && config.getConfigBlock().isBindingList() )
                return (BindingList) config.getConfigBlock();
        }
        return null;
    }

    syn IdDeclList ConfigList.getIdDeclList(String name){
        for(Config config : getConfigList()){
            if(config.isConfigBlock(name) && config.getConfigBlock().isIdDeclList())
                return (IdDeclList) config.getConfigBlock();
        }
        return null;
    }

    syn boolean Config.isConfigBlock(String name){ return getName().getID().equals(name) && hasConfigBlock();}

    syn boolean ConfigBlock.isBinExprList() = false;
    syn boolean ConfigBlock.isBindingList() = false;
    syn boolean ConfigBlock.isIdDeclList() = false;
    eq BinExprList.isBinExprList() = true;
    eq BindingList.isBindingList() = true;
    eq IdDeclList.isIdDeclList() = true;

    syn boolean BinExpr.isDoubleDecl() = getLeft().isIdDecl() && getRight().isIdDecl();
    syn IdDecl BinExpr.getDecl(){
        if(getLeft().isIdDecl())
            return (IdDecl) getLeft();
        return (IdDecl) getRight();
    }

    syn Value BinExpr.getValue(){
        if(!getLeft().isIdDecl())
            return  getLeft();
        return getRight();
    }

    inh NodeConfig NodeName.getNode();
    eq NodeConfig.getNodeName().getNode() = this;

    syn String Value.getStr() = null;
    syn int Value.getInt() = 0;
    syn boolean Value.getBool() = false;
    syn String Value.getColor() = "#000000";

    eq Bool.getBool() = Boolean.parseBoolean(getBOOL());
    eq Num.getInt() = Integer.parseInt(getNUMERAL());
    eq Str.getStr() = getString().substring(1, getString().length()-1);

    // ============================
    // See if an variable, var, is correct according to the filter
    // ============================


    syn boolean BinExpr.validateExpr(Object attr){
        try{
            if(getValue().isBool())
                return validateExpression((boolean) attr);
            if(getValue().isInt() || getValue().isIntArray())
                return validateExpression((int) attr);
            if(getValue().isString() || getValue().isStrArray())
                return validateExpression((String) attr);
        }catch (ClassCastException e) {
             e.printStackTrace();
        }
        return false;
    }

    syn boolean BinExpr.validateExpression(int attr) = false;
    syn boolean BinExpr.validateExpression(boolean attr) = false;
    syn boolean BinExpr.validateExpression(String attr) = false;

    //In for string, Integer and boolean

    eq IN.validateExpression(String attr){
        if(getValue().isStrArray()){
            for(Str str : ((StrArray)getValue()).getStrList()){
                if(str.getStr().equals(attr))
                    return true;
            }
        }
        return false;
    }

     eq IN.validateExpression(int attr){
            if(getValue().isIntArray()){
                for(Num in : ((NumArray)getValue()).getNumList()){
                    if(in.getInt() == attr)
                        return true;
                }
            }
            return false;
        }

    // String
    eq EQ.validateExpression(String attr) = getValue().getStr().equals(attr);
    eq NEQ.validateExpression(String attr) = !(getValue().getStr().equals(attr));

    //Boolean
    eq EQ.validateExpression(boolean attr) = (getValue().getBool() && attr) || (!getValue().getBool() && !attr);
    eq NEQ.validateExpression(boolean attr) = (getValue().getBool() && !attr) || (!getValue().getBool() && attr);

    // Integer
    eq EQ.validateExpression(int attr) = getValue().getInt() == attr;
    eq NEQ.validateExpression(int attr) = !(getValue().getInt() == attr);

    eq LEQ.validateExpression(int attr) = getValue().getInt() >= attr;
    eq GEQ.validateExpression(int attr) = getValue().getInt() <= attr;
    eq LT.validateExpression(int attr) = getValue().getInt() > attr;
    eq GT.validateExpression(int attr) = getValue().getInt() < attr;

    // ---------------- two variables

    syn boolean BinExpr.validateExpr(Object attr, Object attr2, Class type, String decl){
        try{
            if(type.equals(boolean.class))
                return validateExpression((boolean) attr, (boolean) attr2);
            if(type.equals(int.class)){
                return validateExpression((int) attr, (int) attr2);
            }if(type.equals(String.class))
                return validateExpression((String) attr, (String) attr2);
        }catch (ClassCastException e) {
             e.printStackTrace();
        }
        return false;
    }

    syn boolean BinExpr.validateExpression(int attr, int attr2) = false;
    syn boolean BinExpr.validateExpression(boolean attr, boolean attr2) = false;
    syn boolean BinExpr.validateExpression(String attr, String attr2) = false;

    // String
    eq EQ.validateExpression(String attr, String attr2) = attr.equals(attr2);
    eq NEQ.validateExpression(String attr, String attr2) = !attr.equals(attr2);

    // Boolean
    eq EQ.validateExpression(boolean attr, boolean attr2) = (attr && attr2) || (!attr && !attr2);
    eq NEQ.validateExpression(boolean attr, boolean attr2) = (attr && !attr2) || (!attr && attr2);

    // Integer
    eq EQ.validateExpression(int  attr, int attr2) = attr == attr2;
    eq NEQ.validateExpression(int attr, int attr2) = attr != attr2;
    eq LEQ.validateExpression(int attr, int attr2) = attr <= attr2;
    eq GEQ.validateExpression(int attr, int attr2) = attr >= attr2;
    eq LT.validateExpression(int attr, int attr2) = attr < attr2;
    eq GT.validateExpression(int attr, int attr2) = attr > attr2;
}