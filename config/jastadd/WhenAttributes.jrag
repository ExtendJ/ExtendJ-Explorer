
import jastaddad.api.filteredtree.TreeNode;
import jastaddad.api.filteredtree.GenericTreeNode;
import jastaddad.api.*;
aspect WhenAttributes{
    syn boolean ChildOf.isNot() = getNot().getBool();
    syn boolean ParentOf.isNot() = getNot().getBool();

    syn boolean ChildOf.isChildOf(jastaddad.api.Node node){
        jastaddad.api.Node parent = node.parent;
        if(parent == null)
            return false;
        boolean ret = parent.getSimpleNameClass().equals(getLangDecl().getID());
        return isNot() ? !ret : ret;
    }

    syn boolean ParentOf.isParentOf(jastaddad.api.Node node){
        boolean ret;
        for(jastaddad.api.Node child : node.children){
            ret = child.getSimpleNameClass().equals(getLangDecl().getID());
            if(ret)
                return isNot() ? !ret : ret;
        }
        return isNot();
    }

    syn ArrayList<Expr> DebuggerConfig.getFilterExpressions(jastaddad.api.Node node){
    		ArrayList<Expr> exprs = new ArrayList<>();
    		boolean found = getFilterExpressions(node.node.getClass(), exprs, false);
    		return found ? exprs : null;
    	}

    	private boolean DebuggerConfig.getFilterExpressions(Class nodeClass, ArrayList<Expr> exprs, boolean found){
    		if(nodeClass == null)
    			return found;
    		for(NodeFilter filter : nodeFilters()){
    			//System.out.println(filter.getClassName() + " " + nodeClass.getSimpleName());
    			if(filter.getClassName().equals(nodeClass.getSimpleName())){
    				found = true;
    				exprs.addAll(filter.expressions());
    				break;
    			}
    		}
    		return getFilterExpressions(nodeClass.getSuperclass(), exprs, found);
    	}

    	// set with all NodeFiltes
    	coll ArrayList<NodeFilter> DebuggerConfig.nodeFilters() [new ArrayList<NodeFilter> ()] with add root DebuggerConfig;
    	Node contributes debuggerConfig().nodeFilter(getClassName().getID())
    		when isThisFilterActive()
    		to DebuggerConfig.nodeFilters()
    		for debuggerConfig();

    	// ArrayList with all expressions for each NodeFilter
    	coll ArrayList<Expr> NodeFilter.expressions() [new ArrayList<Expr> ()] with addAll root DebuggerConfig;
    	Node contributes getExprs()
    		to NodeFilter.expressions()
    		for debuggerConfig().nodeFilter(getClassName().getID());

    	// ArrayList with all When expressions
    	syn ArrayList<Expr> Node.getExprs(){
    		ArrayList<Expr> list = new ArrayList<>();
    		When when = getWhen();
    		if(when == null)
    			return list;

    		for(Expr thing : when.getExprs()){
    			list.add(thing);
    		}
    		return list;
    	}

    	syn When Node.getWhen(){
    		for(NodeConfig config : getNodeConfigs()){
    			if(config.isWhen())
    				return (When)config;
    		}
    		return null;
    	}
}