
aspect subTreeAttributes{

    syn ArrayList<Expr> DebuggerConfig.getSubTreeExpressions(Class nodeClass){
        ArrayList<Expr> exprs = new ArrayList<Expr>();
        boolean found = false, hasShown = false, addedWhen = false;
        Class clazz = nodeClass;
        while(clazz != null){
            for(NodeFilter filter : nodeFilters()){
                if(filter.getClassName().equals(clazz.getSimpleName())){
                    for(Expr e : filter.subTreeExpressions()){
                        if(e.isShown() && !hasShown)
                            hasShown = true;
                    }
                    if(hasShown && !addedWhen){
                        addedWhen = true;
                        exprs.addAll(getFilterExpressions(clazz));
                    }
                    found = true;
                    break;
                }
            }
            clazz = clazz.getSuperclass();
        }
        return found ? exprs : null;
    }

    // ArrayList with all expressions for each NodeFilter
    coll ArrayList<Expr> NodeFilter.subTreeExpressions() [new ArrayList<Expr> ()] with addAll root DebuggerConfig;
    Node contributes getSubTreeExpressions()
        when isThisFilterActive()
        to NodeFilter.subTreeExpressions()
        for debuggerConfig().nodeFilter(getClassName().getID());

    // ArrayList with all When expressions
    syn ArrayList<Expr> Node.getSubTreeExpressions(){
        ArrayList<Expr> list = new ArrayList<Expr>();
        SubTree subtree = getSubTree();
        if(subtree == null)
            return list;

        for(Expr thing : subtree.getExprs()){
            list.add(thing);
        }
        return list;
    }

    syn SubTree Node.getSubTree(){
        for(NodeConfig config : getNodeConfigs()){
            if(config.isSubTree())
                return (SubTree) config;
        }
        return null;
    }
}