import java.util.ArrayList;
import java.util.HashSet;
import java.util.HashMap;

aspect NodeFilter {
	syn nta NodeFilter DebuggerConfig.nodeFilter(String name) = new NodeFilter(name);

	syn boolean Node.isThisFilterActive() = filter().isActive();

	syn Filter Filter.filter() = this;
	eq Filter.getChild(int i).filter() = this;
	inh Filter Node.filter();

	syn boolean Filter.isActive(){
		return debuggerConfig().isFilterActive(getFilterName());
	}

	syn lazy boolean DebuggerConfig.isFilterActive(IdDecl filterName){
		if(!getConfigs().hasUse())
			return false;
		for(IdDecl useFilterName : getConfigs().getUse().getIdDecls()){
			if(useFilterName.getID().equals(filterName.getID()))
				return true;
		}
		return false;
	}

	// set with all NodeFiltes
	coll ArrayList<NodeFilter> DebuggerConfig.nodeFilters() [new ArrayList<NodeFilter> ()] with add root DebuggerConfig;
	Node contributes debuggerConfig().nodeFilter(getClassName().getID())
		when isThisFilterActive()
		to DebuggerConfig.nodeFilters()
		for debuggerConfig();
}

