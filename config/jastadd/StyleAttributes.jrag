aspect StyleAttributes{

	syn HashMap<String, Value> DebuggerConfig.getNodeStyles(jastaddad.api.Node node){
		HashMap<String, Value> bindings = new HashMap<>();
		return getNodeStyles(node.node.getClass(), bindings);
	}

	private HashMap<String, Value> DebuggerConfig.getNodeStyles(Class nodeClass, HashMap<String, Value> styles){
		if(nodeClass == null)
			return styles;
		for(NodeFilter filter : nodeFilters()){
			if(filter.getClassName().equals(nodeClass.getSimpleName())){
				for(Binding b : filter.styles()){
					if(!styles.containsKey(b.getName().getID())){
						styles.put(b.getName().getID(), b.getValue());
					}
				}
				break;
			}
		}
		return getNodeStyles(nodeClass.getSuperclass(), styles);
	}

	coll ArrayList<Binding> NodeFilter.styles() [new ArrayList<Binding> ()] with addAll root DebuggerConfig;
	Node contributes getStyleBindings()
		when isThisFilterActive()
		to NodeFilter.styles()
		for debuggerConfig().nodeFilter(getClassName().getID());

	// ArrayList with all When expressions
	syn ArrayList<Binding> Node.getStyleBindings(){
		ArrayList<Binding> list = new ArrayList<>();
		Style style = getStyle();
		if(style == null)
			return list;

		for(Binding thing : style.getBindings()){
			list.add(thing);
		}
		return list;
	}

	syn Style Node.getStyle(){
		for(NodeConfig config : getNodeConfigs()){
			if(config.isStyle())
				return (Style)config;
		}
		return null;
	}
}