%header {: // this code is inlined before the generated parser
 package configAST;
:};

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		String error = "";
		error += Symbol.getLine(token.getStart());
		error += ',';
		error += Symbol.getColumn(token.getStart());
		error += '-';
		error += Symbol.getLine(token.getEnd());
		error += ',';
		error += Symbol.getColumn(token.getEnd());
		error += ": Syntax Error: unexpected token ";
		if (token.value != null)
		{
			error += '"';
			error += token.value;
			error += '"';
		}
		else
		{
			error += '#';
			error += token.getId();
		}
		throw new SyntaxError(error);
	}
:};

%goal debuggerconfig;

DebuggerConfig debuggerconfig =
	config.a block_list.b {: return new DebuggerConfig(new Opt(a), b); :}
	| block_list.a {: return new DebuggerConfig(new Opt(), a); :};

List block_list =
    block.a {: return new List(a); :}
    | block_list.a block.b {: return a.add(b); :};

Block block =
    include
    | global;

Include include =
	INCLUDE.n LBRACKET node_config_list.a RBRACKET {: return new Include(new ConfigDecl(n), new Opt(a)); :};

Global global =
	GLOBAL.a LBRACKET config_list.b RBRACKET {: return new Global(new ConfigDecl(a), new Opt(b)); :};

NodeConfigList node_config_list =
	/*EmptyList*/ {: return new NodeConfigList(); :}
	| node_list.a {: return new NodeConfigList(a); :};

List node_list =
	node.e {: return new List().add(e); :}
	| node_list.f node.g {: return f.add(g); :};

NodeConfig node =
	node_name.a SEMI {: return new NodeConfig(a, new Opt()); :}
	| node_name.a LBRACKET config_list.b RBRACKET {: return new NodeConfig(a, new Opt(b)); :};

NodeName node_name =
	iddecl.a  {: return new NodeName(a, new Opt()); :}
	| iddecl.a COL iddecl.b {: return new NodeName(a, new Opt(b)); :};

ConfigList config_list =
	/*EmptyList*/ {: return new ConfigList(); :}
 	| config_list_list.a {: return new ConfigList(a); :};

List config_list_list =
	 config.a {: return new List(a); :}
	| config_list_list.a config.b {: return a.add(b); :};

Config config =
	configdecl.a LBRACKET RBRACKET {: return new Config(a, new Opt()); :}
	| configdecl.a LBRACKET config_block.b RBRACKET {: return new Config(a, new Opt(b)); :};

ConfigBlock config_block =
	filter_list.a
	| binding_list
	| decl_list.a {: return new IdDeclList(a); :};

BinExprList filter_list = filter_tmp.a SEMI {: return new BinExprList(a); :};

List filter_tmp =
	binexpr.a {: return new List(a); :}
	| filter_tmp.a SEMI binexpr.b {: return a.add(b); :};

BindingList binding_list = binding_tmp.a SEMI {: return new BindingList(a); :};

List binding_tmp =
 	binding.d {: return new List().add(d); :}
 	| binding_tmp.c SEMI binding.d {: return c.add(d); :};

Binding binding =
	iddecl.a ASSIGNMENT value.b {: return new Binding(a, b); :};

List decl_list =
	decl_tmp.a {: return new List(a); :}
	| decl_list.a decl_tmp.b {: return a.add(b); :};

IdDecl decl_tmp = iddecl.a SEMI {: return a; :};

BinExpr binexpr =
	 value.a IN listValue.b {:return new IN(a,b); :}
	| value.a EQ value.b {:return new EQ(a,b); :}
	| value.a NEQ value.b {:return new NEQ(a,b); :}
	| value.a LEQ value.b  {:return new LEQ(a,b); :}
	| value.a GEQ value.b {:return new GEQ(a,b); :}
	| value.a LT value.b {:return new LT(a,b); :}
	| value.a GT value.b {:return new GT(a,b); :};

Value value =
	 BOOL.a {: return new Bool(a); :}
	| num
	| str
	| iddecl
	| color;

Value listValue =
	LSQBRACKET empty_list.a RSQBRACKET {: return a; :};

Value empty_list =
	/*EmptyList*/ {: return new EmptyArray(); :}
	| str_list.a {: return new StrArray(a); :}
	| num_list.a {: return new NumArray(a); :};

List str_list =
	 str.a {: return new List(a); :}
	| str_list.a COMMA str.b {: return a.add(b); :};

List num_list =
	 num.a {: return new List(a); :}
	| num_list.a COMMA num.b {: return a.add(b); :};

Num num =  NUMERAL.a {: return new Num(a); :};
Str str = STRING.a {: return new Str(a); :};
IdDecl iddecl = ID.a {: return new IdDecl(a); :};
ConfigDecl configdecl = IDCONFIG.a {: return new ConfigDecl(a); :};
Color color = COLOR.a {: return new Color(a); :};

