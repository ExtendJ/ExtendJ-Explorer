%header {: // this code is inlined before the generated parser
 package configAST;
:};

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		String error = "";
		error += Symbol.getLine(token.getStart());
		error += ',';
		error += Symbol.getColumn(token.getStart());
		error += '-';
		error += Symbol.getLine(token.getEnd());
		error += ',';
		error += Symbol.getColumn(token.getEnd());
		error += ": Syntax Error: unexpected token ";
		if (token.value != null)
		{
			error += '"';
			error += token.value;
			error += '"';
		}
		else
		{
			error += '#';
			error += token.getId();
		}
		throw new SyntaxError(error);
	}
:};

%goal debuggerconfig;

DebuggerConfig debuggerconfig =
	CONFIGS LBRACKET filter_config.a RBRACKET filter_list.b {: return new DebuggerConfig(a, b); :};

FilterConfig filter_config =
	use.a binding_list.b {: return new FilterConfig(new Opt(a), b); :}
	| binding_list.b {: return new FilterConfig(new Opt(), b); :};

Use use =
	USE ASSIGNMENT decl_list.a SEMI{: return new Use(a); :};

List decl_list =
	id_decl.a {: return new List(a); :}
	| decl_list.a COMMA id_decl.b {: return a.add(b); :};

List filter_list =
	/*EmptyList*/ {: return new List(); :}
    | filter.a {: return new List(a); :}
    | filter_list.a filter.b {: return a.add(b); :};

Filter filter =
	FILTER id_decl.a LBRACKET node_list.b RBRACKET {: return new Filter(a, b); :};

List node_list =
	/*EmptyList*/ {: return new List(); :}
	| node.a {: return new List(a); :}
	| node_list.a node.b {: return a.add(b); :};

Node node =
	lang_id_decl.a SEMI {: return new NodeConfig(a, new List()); :}
	| lang_id_decl.a LBRACKET node_config_list.b RBRACKET {: return new NodeConfig(a, b); :};

List node_config_list =
	/*EmptyList*/ {: return new List(); :}
 	| node_config.a {: return new List(a); :}
	| node_config_list.a node_config.b {: return a.add(b); :};

NodeConfig node_config =
	 WHEN LBRACKET expr_list.a RBRACKET {: return new When(a); :}
	| STYLE LBRACKET binding_list.a RBRACKET {: return new Style(a); :}
	| SHOW LBRACKET lang_decl_list.a RBRACKET {: return new Show(a); :};

List expr_list =
	/*EmptyList*/ {: return new List(); :}
	| expr.a {: return new List(a); :}
	| expr_list.a expr.b {: return new a.add(b); :};

List binding_list =
	/*EmptyList*/ {: return new List(); :}
 	| binding.a {: return new List(a); :}
 	| binding_list.a binding.b {: return a.add(b); :};

Binding binding =
	id_decl.a ASSIGNMENT value.b SEMI {: return new Binding(a, b); :};

List lang_decl_list =
	/*EmptyList*/ {: return new List(); :}
	lang_id_decl_tmp.a {: return new List(a); :}
	| lang_decl_list.a lang_id_decl_tmp.b {: return a.add(b); :};

LangDecl lang_id_decl_tmp = lang_id_decl.a SEMI {: return a; :};

Expr expr =
	  CHILD OF lang_id_decl.a SEMI {: return ChildOf(new Opt(new Bool("false"), a); :}
	| NOT CHILD OF lang_id_decl.a SEMI {: return ChildOf(new Opt(new Bool("true"), a); :}
	| PARENT OF lang_id_decl.a SEMI {: return ParentOf(new Opt(new Bool("false"), a); :}
	| NOT PARENT OF lang_id_decl.a SEMI {: return ParentOf(, new Opt(new Bool("false"), a); :}
	| lang_id_decl.a SEMI {: return new EQ(a, new Bool("true")); :}
	| binexpr;

BinExpr binexpr =
	 value.a NOT IN listValue.b {:return new NotIn(a,b); :}
	| value.a IN listValue.b {:return new In(a,b); :}
	| value.a EQ value.b {:return new EQ(a,b); :}
	| value.a NEQ value.b {:return new NEQ(a,b); :}
	| value.a LEQ value.b  {:return new LEQ(a,b); :}
	| value.a GEQ value.b {:return new GEQ(a,b); :}
	| value.a LT value.b {:return new LT(a,b); :}
	| value.a GT value.b {:return new GT(a,b); :};

Value value =
	 BOOL.a {: return new Bool(a); :}
	| num
	| str
	| lang_id_decl
	| id_decl
	| color;

Value listValue =
	LSQBRACKET empty_list.a RSQBRACKET {: return a; :};

Value empty_list =
	/*EmptyList*/ {: return new EmptyArray(); :}
	| str_list.a {: return new StrArray(a); :}
	| num_list.a {: return new NumArray(a); :};

List str_list =
	 str.a {: return new List(a); :}
	| str_list.a COMMA str.b {: return a.add(b); :};

List num_list =
	 num.a {: return new List(a); :}
	| num_list.a COMMA num.b {: return a.add(b); :};

Num num = NUMERAL.a {: return new Num(a); :};
Str str = STRING.a {: return new Str(a); :};
IdDecl id_decl = ID.a {: return new IdDecl(a); :};
LandDecl lang_id_decl = LANGID.a {: return new LangDecl(a); :};
Color color = COLOR.a {: return new Color(a); :};
