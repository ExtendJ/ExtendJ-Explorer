buildscript {
	repositories.mavenCentral()
	repositories.mavenLocal()
	dependencies {
		classpath 'org.jastadd:jastaddgradle:1.10.2'
	}
}

if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
	throw new GradleException('Must Build with Java 1.8')
}

// Check for java  8u40.
def matcher = System.getProperty('java.runtime.version') =~ /(\d*)\.(\d*)\.(\d*)(_(\d*))?(\D.*)/
if (matcher?.matches() && (!matcher?.group(5) || Integer.parseInt(matcher?.group(5)) < 40)) {
	throw new GradleException('Must Build with Java 8 update 40 or later')
}

if (!file('extendj/jastadd_modules').exists()) {
	throw new GradleException('ExtendJ seems to be missing. Please run "git submodule init", then "git submodule update".')
}

repositories {
	mavenCentral()
}

configurations {
	jflexConf
	jastaddparserConf
	beaverConf
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jastadd'
apply plugin: 'jacoco'

project.version = '1.2.0'

mainClassName = 'drast.views.gui.DrASTGUI'

defaultTasks 'jar'

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', 'src/gen', 'extendj/java8/src', 'extendj/src/frontend']
		}
		resources {
			srcDir 'src/main/resources'
		}
	}
}

dependencies {
	compile 'org.fxmisc.richtext:richtextfx:0.6.10'
	compile 'org.apache.ant:ant:1.9.4'
	compile 'net.sf.jung:jung-graph-impl:2.0.1'
	compile 'net.sf.jung:jung-api:2.0.1'
	compile 'net.sf.jung:jung-visualization:2.0.1'
	compile 'net.sf.jung:jung-algorithms:2.0.1'
	compile 'com.google.code.findbugs:jsr305:3.0.1'
	compile 'org.apache.commons:commons-lang3:3.5'

	// Note: the Beaver dependency has been removed because it
	// conflicts with ExtendJ's modified beaver.Symbol class.

	testCompile 'junit:junit:4.11'
	testCompile 'org.testfx:testfx-core:4.0.+'
	testCompile 'org.testfx:testfx-junit:4.0.+'
	testCompile 'com.google.truth:truth:0.30'

	jflexConf 'de.jflex:jflex:1.6.1'
	beaverConf 'net.sf.beaver:beaver-cc:0.9.11'
	jastaddparserConf 'org.jastadd:jastaddparser:1.0.3'
}

jastadd {
	configureModuleBuild()
	modules 'extendj/jastadd_modules'
	module = 'java8 frontend'

	astPackage = 'org.extendj.ast'
	genDir = 'src/gen'
	parser.name = 'JavaParser'
	parser.genDir = project.file('src/gen/org/extendj/parser')
	scanner.genDir = project.file('src/gen/org/extendj/scanner')
}

compileJava.dependsOn 'generateFilterLangJava', 'generateScanner', 'generateParser'

clean.dependsOn 'cleanGeneratedJava'

task cleanGeneratedJava(type: Delete) {
	description 'Remove generated Java code.'
	delete project.file('src/gen')
}

task generateFilterLangJava(type: org.jastadd.JastAddTask) {
	description 'Generate Java source files from JastAdd aspects.'

	outputDir = project.file('src/gen')
	sources = project.fileTree('src/jastadd')
		.include('**/*.ast')
		.include('**/*.jadd')
		.include('**/*.jrag')

	options = [ '--beaver',
		'--package=org.jastadd.drast.filterlang',
		'--visitCheck=false' ]

	doFirst {
		project.file('src/gen/org/jastadd/drast/filterlang').mkdirs()
	}
}

task generateScanner(type: JavaExec) {
	classpath = configurations.jflexConf
	main = 'jflex.Main'
	args '-d', project.file('src/gen/org/jastadd/drast/filterlang/').path,
		project.file('src/scanner/FilterScanner.flex').path

	inputs.files project.file('src/scanner/FilterScanner.flex')
	outputs.files project.file('src/gen/org/jastadd/drast/filterlang/FilterScanner.java')

	doFirst {
		project.file('src/gen/drast/filterlang').mkdirs()
	}
}

task preprocessParser(type: JavaExec) {
	classpath = configurations.jastaddparserConf
	main = 'org.jastadd.jastaddparser.Main'
	args project.file('src/parser/FilterParser.parser').path,
		project.file('src/gen/FilterParser.beaver').path

	inputs.files project.file('src/parser/FilterParser.parser')
	outputs.files project.file('src/gen/FilterParser.beaver')

	doFirst {
		project.file('src/gen').mkdirs()
	}
}

task generateParser(type: JavaExec) {
	dependsOn 'preprocessParser'

	classpath = configurations.beaverConf
	main = 'beaver.comp.run.Make'
	args '-d', project.file('src/gen/org/jastadd/drast/filterlang').path,
		'-t', '-c', '-w',
		project.file('src/gen/FilterParser.beaver').path

	inputs.files project.file('src/gen/FilterParser.beaver')
	outputs.files project.file('src/gen/org/jastadd/drast/filterlang/FilterParser.java')

	doFirst {
		project.file('src/gen/org/jastadd/drast/filterlang').mkdirs()
	}
}

jar {
	destinationDir = projectDir
	manifest.attributes 'Main-Class': project.mainClassName
	baseName = 'ExJExplorer'
	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

// Code coverage with Jacoco:
jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
	}
}

check.dependsOn jacocoTestReport

