buildscript {
	repositories.mavenLocal()
	repositories.maven {
		url 'http://jastadd.org/mvn/'
	}
	dependencies {
		classpath group: 'org.jastadd', name: 'jastaddgradle', version: '1.9'
	}
}


if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
	throw new GradleException("Must Build with Java 1.8")
}
// check for 8u20
def matcher = System.getProperty("java.runtime.version") =~ /(\d*)\.(\d*)\.(\d*)(_(\d*))?(\D.*)/
if (matcher?.matches() && (!matcher?.group(5) || Integer.parseInt(matcher?.group(5)) < 20)) {
	throw new GradleException("Must Build with Java 8 update 20 or later")
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jastadd'

jastadd {
	modules "."
	module = "config"
	astPackage = "configAST"
	genDir = "src/gen"
	scanner.genDir = "src/gen/configAST"
	parser.name = "ConfigParser"
	parser.genDir = "src/gen/configAST"
}

dependencies {
	compile fileTree(dir: 'libs', include: '*.jar')
	compile 'org.apache.ant:ant:1.9.4'
	compile 'net.sf.jung:jung-graph-impl:2.0.1'
	compile 'net.sf.jung:jung-api:2.0.1'
	compile 'net.sf.jung:jung-visualization:2.0.1'
	compile 'net.sf.jung:jung-algorithms:2.0.1'
	testCompile 'junit:junit:4.+'
	compile fileTree(dir: "${System.properties['java.home']}", include: '**/jfxrt.jar')
	compile fileTree(dir: "${System.properties['java.home']}", include: '**/jfxswt.jar')
	compile fileTree(dir: "${System.properties['java.home']}", include: '**/ant-javafx.jar')
	runtime fileTree(dir: "${System.properties['java.home']}", include: '**/javafx-mx.jar')
}

task fatJar(type: Jar) {
	destinationDir = projectDir
	manifest.attributes 'Main-Class': 'jastaddad.JastAddAd'
	baseName = "${project.name}"
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}