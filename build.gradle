buildscript {
	repositories {
		mavenLocal()
		maven {
			name = 'BinTray'
			url = 'http://dl.bintray.com/content/shemnon/javafx-gradle/'
		}
		maven {
			name = 'CloudBees Snapshot'
			url = 'http://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot'
		}
		ivy {
			url = 'http://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot'
		}
		mavenCentral()
	}
	dependencies {
		classpath 'org.bitbucket.shemnon.javafxplugin:gradle-javafx-plugin:0.3.0'
		classpath project.files("${System.properties['java.home']}/lib/ant-javafx.jar")
		classpath project.files("${System.properties['java.home']}/lib/javafx-mx.jar")
		classpath project.files("${System.properties['java.home']}/lib/jfxrt.jar")
		classpath project.files("${System.properties['java.home']}/lib/jfxswt.jar")
	}
}

if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
	throw new GradleException("Must Build with Java 1.8")
}
// check for 8u20
def matcher = System.getProperty("java.runtime.version") =~ /(\d*)\.(\d*)\.(\d*)(_(\d*))?(\D.*)/
if (matcher?.matches() && (!matcher?.group(5) || Integer.parseInt(matcher?.group(5)) < 20)) {
	throw new GradleException("Must Build with Java 8 update 20 or later")
}

repositories {
	mavenLocal()
	mavenCentral()
}

//apply from: "http://dl.bintray.com/content/shemnon/javafx-gradle/0.3.0/javafx.plugin"

apply plugin: 'java'
apply plugin: 'application'

dependencies {
	compile fileTree(dir: 'libs', include: '*.jar')
	compile 'org.apache.ant:ant:1.9.4'
	compile 'net.sf.jung:jung-graph-impl:2.0.1'
	compile 'net.sf.jung:jung-api:2.0.1'
	compile 'net.sf.jung:jung-visualization:2.0.1'
	compile 'net.sf.jung:jung-algorithms:2.0.1'
	testCompile 'junit:junit:4.+'
	compile fileTree(dir: "${System.properties['java.home']}", include: '**/jfxrt.jar')
	compile fileTree(dir: "${System.properties['java.home']}", include: '**/jfxswt.jar')
	compile fileTree(dir: "${System.properties['java.home']}", include: '**/ant-javafx.jar')
	runtime fileTree(dir: "${System.properties['java.home']}", include: '**/javafx-mx.jar')
}

String getProjectProperty(String propertyName) {
	project.hasProperty(propertyName) ? project.property(propertyName) : null
}

task fatJar(type: Jar) {
	destinationDir = projectDir
	manifest.attributes 'Main-Class': 'jastaddad.JastAddAd'
	baseName = "${project.name}"
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}


